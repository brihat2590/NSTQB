generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model certifiedTesters {
  name              String
  certificateNumber String   @unique
  certificateBody   String
  examProvider      String
  certification     String
  countryOfIssue    String
  certificationDate DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  id                String   @id @default(uuid())
}

model carouselImage {
  id          String @id @default(uuid())
  url         String
  description String @default("")
  title       String @default("")
}

model examSchedule {
  id                String   @id @default(uuid())
  examTitle         String
  examDate          DateTime
  applicationPeriod DateTime
  location          String
}

model boardMembers {
  id          String @id @default(cuid())
  name        String @unique
  title       String
  linkedInUrl String
  imageUrl    String
  order       Int
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  imageUrl  String
}

model Event {
  id            Int                 @id @default(autoincrement())
  title         String
  description   String
  date          DateTime
  imageUrl      String
  isPaid        Boolean             @default(false)
  price         Int?
  slug          String              @unique
  createdAt     DateTime            @default(now())
  registrations EventRegistration[]
}

model EventRegistration {
  id               Int      @id @default(autoincrement())
  name             String
  email            String
  eventId          Int
  amount           Int?
  status           String   @default("pending")
  createdAt        DateTime @default(now())
  transaction_uuid String?  @unique
  event            Event    @relation(fields: [eventId], references: [id])
}

model flowingHeadlines {
  id        String   @id @default(cuid())
  text      String
  icon      String
  href      String
  type      String
  createdAt DateTime @default(now())
}

model ExamRegistration {
  id                Int      @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String
  designation       String
  screenShot        String
  phone             String
  citizenshipNumber String
  status            String   @default("PENDING")
  createdAt         DateTime @default(now())
  remarks           String?
  companyName       String?
}

model QuestionSet {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  questions Question[]
}

model Question {
  id             Int          @id @default(autoincrement())
 
  question       String
  setId          Int
  createdAt      DateTime     @default(now())
  options        String[]
  correctAnswer  Int?
  correctAnswers Int[]
  explanation    String
  type           QuestionType
  image          String?
  set            QuestionSet  @relation(fields: [setId], references: [id])
}

enum QuestionType {
  single
  multiple
}
