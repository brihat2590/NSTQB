// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id       String   @id @default(uuid())
  
  email    String   @unique
  password String
  createdAt DateTime @default(now())
}
model certifiedTesters{
  id String @id @default(uuid())
  name String
  certificateNumber String @unique
  certificateBody String
  examProvider String
  certification String
  countryOfIssue String
  certificationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())


}


model carouselImage{
  id String @id @default(uuid())
  url String
  title       String   @default("")
  description String   @default("")
}
model examSchedule {
  id                   String   @id @default(uuid())
  examTitle            String
  examDate             DateTime
  applicationPeriod    DateTime
  location             String
}
model boardMembers{
  id String @id @default(cuid())
  name String @unique
  title String
  linkedInUrl String
  imageUrl String
  order Int 
  

}

model Blog{
  id String @id @default(uuid())
  title String
  slug String @unique
  imageUrl String
  content String
  summary String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model Event {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  slug        String @unique
  
  imageUrl String 
  isPaid Boolean @default(false)
  price Int?
  registrations EventRegistration[]
  createdAt  DateTime       @default(now())
  
}

model EventRegistration {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int
  amount      Int?
  status     String   @default("pending") // pending, completed, failed
  
  transaction_uuid String?  @unique// eSewa transaction ID
   // eSewa reference ID
  createdAt   DateTime @default(now())
}




model flowingHeadlines{
  id String @id @default(cuid())
  text String
  icon String //Calendar Users 
  href String
  type String //info, urgent
  createdAt DateTime @default(now())
}
model ExamRegistration{
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String
  designation String
  screenShot String
  phone String
  citizenshipNumber String
  status String @default("PENDING")
  remarks String?
  createdAt DateTime @default(now())
}
